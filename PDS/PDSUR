UR TITLE '     PDSUR -- PDS UNLOAD/RELOAD UTILITY PROGRAM'
**  TITLE - PDS UNLOAD/RELOAD UTILITY PROGRAM                       **
**                                                                  **
**  NAME - PDSUR                                                    **
**                                                                  **
**  STATUS - VERSION 1.2,  UPDATED 03JUL73                          **
**                                                                  **
**  CSECTS -                                                        **
**       PDSUR    - MAIN CSECT                                      **
**       PDSUR1   - UNLOAD OPERATION PROGRAM CSECT                  **
**       PDSUR2   - RELOAD OPERATION PROGRAM CSECT                  **
**                                                                  **
**  ENTRY POINTS -                                                  **
**       PDSUR   (ONLY ENTRY)                                       **
**                                                                  **
**  DESIGNED AND WRITTEN BY -                                       **
**       GENE CZARCINSKI,  CODE 531                                 **
**       NASA/GODDARD SPACE FLIGHT CENTER                           **
**       GREENBELT, MARYLAND  20771                                 **
**                                                                  **
**  FUNCTION/OPERATION -                                            **
**       THIS ROUTINE IS A PARTITIONED DATA SET UTILITY PROGRAM     **
**       DESIGNED TO PROCESS BACKUP COPIES OF A PDS.  IT CAN BE     **
**       USED TO UNLOAD OR (RE)LOAD A PDS.  THE UNLOADED FORMAT     **
**       IS "IEHMOVE" COMPATABLE ALTHOUGH IT CAN HANDLE UNLOADED    **
**       BLKSIZES LARGER THAN 800 WHEREAS IEHMOVE CANNOT.  PDSUR    **
**       USES JCL TO SPECIFY (AND ALLOCATE) DIRECT ACCESS SPACE     **
**       FOR THE PDS (RATHER THAN THE DYNAMIC ALLOCATION THAT       **
**       IEHMOVE USES).  SINCE PDSUR OPERATES AS A DATA SET UTILITY,**
**       A SEPARATE DD STATEMENT IS REQUIRED FOR EACH PDS AND FOR   **
**       EACH (UNLOADED) PDS (SEQUENTIAL FILE).                     **
**                                                                  **
**  ATTRIBUTES -                                                    **
**       SERIALLY REUSABLE, BLOCK LOADED, PROB. PGM. STATE          **
**                                                                  **
**  LANGUAGE -                                                      **
**       OS/360 ASSEMBLER LANGUAGE AS DEFINED BY ASSEMBLER(G),      **
**       VERSION 2, LEVEL 5.                                        **
**                                                                  **
**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**
**                                                                  **
**  NOTES -                                                         **
**       1. THIS ROUTINE PROCESSES IBM'S IEHMOVE COMPATABLE         **
**          UNLOADED FORMAT FOR A PDS (BUT AS A DATA SET UTILITY    **
**          RATHER THAN A SYSTEM UTILITY).                          **
**       2. THE DEFAULT BLKSIZE FOR UNLOADED (TAPE) OUTPUT IS 800.  **
**       3. A PDSUR ID RECORD IS INSERTED AS THE LAST RECORD IN     **
**          AN UNLOADED PDS TO IDENTIFY CREATOR.                    **
**       4. REBLOCKING (FOR LOADING) IS VALID ONLY FOR RECFM=F/FB.  **
**       5. THIS ROUTINE IS DESIGNED TO RUN AS A JOB-STEP TASK      **
**          SINCE THE SYSPRINT & SYSIN DDNAMES CANNOT BE CHANGED    **
**          EXCEPT BY RE-ASSEMBLY.                                  **
**       6. THIS ROUTINE WAS DEVELOPED AND TESTED UNDER OS/360      **
**          MVT RELEASE 20.6.  HOWEVER, IT SHOULD RUN (WITH NO      **
**          MODIFICATIONS) UNDER EARLY OR LATER RELEASES OF MVT,    **
**          UNDER MFT-II, OR UNDER OTHER COMPATABLE VERSIONS OF     **
**          OS/360 OR OS/370.                                       **
**       7. ALL OPERATIONS MUST BE SPECIFIED THRU THE SYSIN FILE.   **
**          VALID OPERATIONS ARE: 'RELOAD' AND 'UNLOAD'.            **
**       8. ALTHOUGH NOT STRICTLY IEHMOVE COMPATABLE, THIS          **
**          ROUTINE WILL HANDLE BLKSIZES LARGER THAN 800 FOR THE    **
**          UNLOADED DATA SET.                                      **
**       9. UNLOADED DATA SETS MUST BE SEQUENTIALLY ORGANIZED.      **
**          UNLOADED DATA SETS WILL NORMALLY RESIDE ON TAPE, BUT    **
**          THERE IS NOTHING TO PREVENT IT FROM BEING OTHER THAN    **
**          TAPE.                                                   **
**      10. ALL CONTROL STATEMENTS MUST BE CONTAINED ON A SINGLE    **
**          CARD IMAGE (NO CONTINUE CARDS).                         **
**                                                                  **
**                                                                  **
**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**
 EJECT
**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**
**  LOCAL  MACRO  DEFINITIONS                                       **
**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**
         MACRO
&N       TAPEIN    &A,&B
&N       BAL       R12,TAPEIN          READ IN A RECORD
         B         &A                  EOF/ERROR RETURN
         MEND
**
         MACRO
&N       SETRC     &RC
         LA        R15,&RC             RETURN CODE
         BAL       R14,SETRET
         MEND
**
         MACRO
&N       CMPR      &A,&B,&TYPE=E
&N       CLC       =C&A,0(R2)
         B&TYPE    &B
         MEND
**
         MACRO
         NEXT      &A,&B
         LA        R4,&A
L&SYSNDX CLI       0(R2),C' '          LOCATE NEXT NON-BLANK
         BNE       *+16
         LA        R2,1(R2)
         BCT       R4,L&SYSNDX
         B         &B
         MEND
**
         MACRO
&N       INFOJFCB  &A,&B,&TYPE=1
&N       LA        R15,2
         BAL       R12,PRINTA
         MVI       0(R1),C'0'
         MVC       11(L'MSG22A,R1),MSG22A
         MVC       19(L'MSG22C,R1),MSG22C
         MVC       L'MSG22C+19(6,R1),&A+JFCBVOLS
         MVC       40(L'MSG22D,R1),MSG22D
         MVC       L'MSG22D+40(44,R1),&A+JFCBDSNM
         CHKTAPE   &A
         AIF       ('&TYPE' EQ '1').ONE
         CLI       TYPE,8              LIST?
         BE        X&SYSNDX            YES, SKIP.
.ONE     ANOP
         BAL       R12,PRINT1
         MVC       11(L'MSG22B,R1),MSG22B
         MVC       19(L'MSG22C,R1),MSG22C
         MVC       L'MSG22C+19(6,R1),&B+JFCBVOLS
         MVC       40(L'MSG22D,R1),MSG22D
         MVC       L'MSG22D+40(44,R1),&B+JFCBDSNM
         CHKTAPE   &B
X&SYSNDX BAL       R12,PRINT1
         MEND
**
         MACRO
         CHKTAPE   &A
         AIF       ('&A' EQ 'JFCB2').OK
         MEXIT
.OK      TM        SWB,SWB4            TAPE?
         BZ        X&SYSNDX            NO.
         LH        R0,JFCB2+JFCBFLSQ
         CVD       R0,WORK1
         OI        WORK1+7,X'0F'
         MVI       L'MSG22C+25(R1),C','
         UNPK      L'MSG22C+26(4,R1),WORK1
X&SYSNDX EQU       *
         MEND
**
         MACRO
&N       SEARCH    &A,&B,&C,&D,&E
&N       LA        R14,&A
A&SYSNDX L         R14,0(R14)
         LTR       R14,R14
         BZ        &E
         LA        R1,4(R14)
         LA        R15,32
B&SYSNDX CLI       0(R1),&B
         BE        &E
         CLC       0(8,R1),0(&C)
         BE        &D
         LA        R1,8(R1)
         BCT       R15,B&SYSNDX
         B         A&SYSNDX
         MEND
**
         MACRO
&N       INFOPDS1  &A,&B,&C,&D,&E
         LCLC      &X
&X       SETC      'L'''
&N       BAL       R12,PRINT1
         MVC       11(&X&D,R1),&D
         BAL       R12,PRINT1
         LA        R1,5(R1)
         MVC       11(&X&E,R1),&E
         MVI       17(R1),C'?'
         LA        R15,18(R1)
         TM        &A,RECU
         BZ        B&SYSNDX
         MVI       17(R1),C'U'
         BO        A&SYSNDX
         MVI       17(R1),C'F'
         TM        &A,RECF
         BO        *+8
         MVI       17(R1),C'V'
         TM        &A,RECFB-RECF
         BZ        *+12
         MVI       0(R15),C'B'
         LA        R15,1(R15)
         TM        &A,RECS
         BZ        *+12
         MVI       0(R15),C'S'
         LA        R15,1(R15)
A&SYSNDX TM        &A,RECT
         BZ        *+12
         MVI       0(R15),C'T'
         LA        R15,1(R15)
         TM        &A,RECA
         BZ        *+12
         MVI       0(R15),C'A'
         B         B&SYSNDX
         TM        &A,RECM
         BZ        *+8
         MVI       0(R15),C'M'
B&SYSNDX LH        R0,&B               LRECL
         CVD       R0,WORK1
         OI        WORK1+7,X'0F'
         UNPK      31(5,R1),WORK1
         LH        R0,&C               BLKSIZE
         CVD       R0,WORK1
         OI        WORK1+7,X'0F'
         UNPK      46(5,R1),WORK1
         MEND
**
         MACRO
&N       INFOPDS2
&N       MVC       WORK1(2),UNLDDIR    DIR BLKS
         LH        R0,WORK1
         CVD       R0,WORK1
         OI        WORK1+7,X'0F'
         UNPK      68(3,R1),WORK1
         CH        R0,=H'999'
         BNH       *+10
         UNPK      68(5,R1),WORK1
         MEND
**
 EJECT
PDSUR    START     0
**
R0       EQU       0         OS PARM REG; WORK REG
R1       EQU       1         OS PARM REG; WORK REG
R2       EQU       2         LOCAL WORK REG
R3       EQU       3         LOCAL WORK REG
R4       EQU       4         LOCAL WORK REG
R5       EQU       5         POINTER TO PDS BUFFER
R6       EQU       6         DIRECTORY ENTRY POINTER
R7       EQU       7         PNTR TO DIR NL TTR'S
R8       EQU       8
R9       EQU       9         DATA BASE REGISTER
R10      EQU       10        MAIN BASE REGISTER
R11      EQU       11        SECONDARY CSECT BASE REGISTER
R12      EQU       12        LOCAL LINK REGISTER
R13      EQU       13        SAVE AREA PNTR
R14      EQU       14        OS LINK REG; WORK REG
R15      EQU       15        OS EP ADRS REG; WORK REG
**
OFLG     EQU       X'10'     DCB OPEN FLAGS
RECMASK  EQU       X'F0'
RECU     EQU       X'C0'     RECFM=U
RECF     EQU       X'80'     RECFM=F
RECFB    EQU       X'90'     RECFM=FB
RECV     EQU       X'40'     RECFM=V
RECVB    EQU       X'50'     RECFM=VB
RECT     EQU       X'20'     TRACK OVERFLOW
RECS     EQU       X'08'     FBS OR VBS
RECA     EQU       X'04'     ASA CONTROL CHARACTER
RECM     EQU       X'02'     MACHINE CONTROL CHARACTER
ALIAS    EQU       X'80'     ALIAS BIT IN PDS DIRECTORY BLOCK ENTRY
JFCBDSNM EQU       0         OFFSET TO DSNAME
JFCBVOLS EQU       118       OFFSET TO VOLSER
JFCBIND2 EQU       87        OFFSET TO 'DISP=...'
JFCBNEW  EQU       X'C0'     BITS ON IF DISP=NEW
JFCRECFM EQU       100       OFFSET TO RECFM
JFCBLKSI EQU       102       OFFSET TO BLKSIZE
JFCLRECL EQU       104       OFFSET TO LRECL
JFCBFLSQ EQU       68        OFFSET TO MAG TAPE FILE SEQ NO.
**  IBM'S UNLOADED RECORD TYPE INDICATORS
@TTR     EQU       X'80'     TTR
@PDS     EQU       X'40'     UNLOADED DATA SET IS A PDS
@MEM     EQU       X'20'     RECORD IS PART OF MEMBER
@NL      EQU       X'10'     RECORD IS A NOTE LIST
@DIR     EQU       X'08'     RECORD IS A DIRECTORY RECORD
@DUM     EQU       X'04'     RECORD IS A DUMMY RECORD
@X       EQU       X'02'     NOT USED
@END     EQU       X'01'     "END OF FILE"
**
RC1      EQU       04        RETURN CODE - WARNING
RC2      EQU       08        RETURN CODE - ERROR
RC3      EQU       12        RETURN CODE - SERIOUS ERROR
RC4      EQU       16        RETURN CODE - TERMINAL ERROR
RC5      EQU       20        RETURN CODE - SYSPRINT OPEN ERROR
**
SWA1     EQU       X'80'     OPERATION TERMINATED
SWA2     EQU       X'40'     EOF DETECTED
SWA3     EQU       X'20'     FLAG FOR PROCESSING ALIAS
SWA4     EQU       X'10'     FLAG FOR A NOTELIST PROCESSED
SWA5     EQU       X'08'     STOW REPLACE TO BE USED
SWA6     EQU       X'04'     FLAG TO LEAVE TAPE MOUNTED
SWA7     EQU       X'02'     NOTELIST FLAG
SWA8     EQU       X'01'     DIRECTORY ENTRY PROCESSED
SWB1     EQU       X'80'     REBLOCKING FLAG #1
SWB2     EQU       X'40'     REBLOCKING FLAG #2
SWB3     EQU       X'20'     DIR UPDATE FLAG FOR REBLOCK
SWB4     EQU       X'10'     "1" -> SEQUENTIAL DEVICE IS A TAPE
SWB5     EQU       X'08'     FLUSH FLAG #1
SWB6     EQU       X'04'     FLUSH FLAG #2
SWB7     EQU       X'02'     SELECT OR EXCLUDE SPECIFIED
SWB8     EQU       X'01'     "0"=SELECT;  "1"=EXCLUDE
SWX1     EQU       X'80'     EOF DETECTED ON SYSIN READING LAST CARD
SWX2     EQU       X'40'     RECFM=V OPEN FLAG
SWX3     EQU       X'20'
SWX4     EQU       X'10'
SWX5     EQU       X'08'
SWX6     EQU       X'04'
SWX7     EQU       X'02'
SWX8     EQU       X'01'
**
 EJECT
**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**
**  PROGRAM INITIALIZATION                                          **
**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**
         SAVE      (14,12),,PDSUR__VERSION-1.2_GENE-CZARCINSKI
         BALR      R10,0               GET BASE ADRS
         USING     *,R10               ESTABLISH ADDRESSABILITY
         LA        R15,SAVEAREA        SET UP SAVE AREA
         ST        R13,4(R15)
         ST        R15,8(R13)
         LR        R13,R15
         LR        R9,R15
         USING     SAVEAREA,R9         DATA BASE ADDRESSABILITY
         SR        R15,R15
         STH       R15,RETCOD
         STH       R15,PNUM
         STC       R15,SWX
         MVC       PCNT,PLIM
         OPEN      (SYSPRINT,(OUTPUT))
         TM        SYSPRINT+(DCBOFLGS-IHADCB),OFLG  CHECK OPEN
         BO        STAEINIT            OPEN OK.
         WTO       'PDSUR:  OPEN ERROR FOR DDNAME=SYSPRINT',           +
               ROUTCDE=11,DESC=7
         L         R13,4(R13)          ERROR ... ABORT
         RETURN    (14,12),T,RC=RC5
STAEINIT STAE      STAEXIT,CT
         OPEN      (SYSIN,(INPUT))
         TM        SYSIN+(DCBOFLGS-IHADCB),OFLG  CHECK OPEN
         BO        CARDINIT            OPEN OK.
         BAL       R12,PRINT2          ERROR -- PRNT MSG
         MVC       5(L'MSG08,R1),MSG08
         MVC       (L'MSG08+5)(5,R1),=C'SYSIN'
         SETRC     RC4
         B         ENDTASK2
CARDINIT BAL       R12,GETCARD
         B         ENDTASK
         ST        R1,LASTCARD
 TITLE '           PERFORM GENERAL INITIALIZATION'
**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**
**  PERFORM  GENERAL  INITIALIZATION  (FOR REQUESTED OPERATION)     **
**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**
BEGIN    TM        SWX,SWX1            EOF ON SYSIN?
         BO        ENDTASK             YES, DONE.
         MVC       FROMDD,=CL8' '
         MVC       TODD,=CL8' '
         GETMAIN   R,LV=0              COLLECT CORE
         XC        SWITCHES,SWITCHES   CLEAR ALL SWITCHES
**
**  GET AND ANALYZE A CONTROL CARD
**
         BAL       R12,PRINT2          PRINT HEADER
         MVC       0(MSG25L,R1),MSG25
         LR        R2,R1               SAVE POINTER
         TIME      DEC                 GET DATE/TIME
         ST        R0,WORK1            NOW FORTMAT IT FOR HEADING
         XC        WORK1+8(8),WORK1+8
         ST        R1,WORK1+12
         MVC       WORK1+5(1),WORK1+13 SAVE YEAR
         CVB       R15,WORK1+8         CONVERT DATE TO BINARY
         XR        R14,R14
         D         R14,=F'1000'        TO SEPARATE YEAR & DAY
         ST        R15,WORK1+8
         LA        R15,MONTHS1         FOR STD YEAR
         TM        WORK1+11,X'03'      LEAP YEAR?
         BNZ       *+8                 NO.
         LA        R15,MONTHS2         YES, USE TABLE 2
         XR        R1,R1
BEGIN10  SH        R14,0(R15)
         BNP       BEGIN11
         LA        R1,3(R1)
         LA        R15,2(R15)
         B         BEGIN10
BEGIN11  AH        R14,0(R15)
         MH        R14,=H'10'
         CVD       R14,WORK1+8         FOR DAY OF MONTH
         LA        R1,MONTHS3(R1)      FOR MONTH IN CHARS
         MVC       L'MSG25+3(3,R2),0(R1)
         MVC       WORK1+4(1),WORK1+14 DAY OF MONTH
         ED        L'MSG25(8,R2),WORK1+4
         CLI       L'MSG25+1(R2),C' '
         BNE       *+8
         MVI       L'MSG25+1(R2),C'0'
         ED        L'MSG25+8(9,R2),WORK1
         CLI       L'MSG25+9(R2),C' '
         BNE       *+8
         MVI       L'MSG25+9(R2),C'0'
*
         L         R2,LASTCARD
         LA        R15,2               TO PRINT THE CARD IMAGE
         BAL       R12,PRINT1
         MVI       0(R1),C'0'
         MVC       5(80,R1),0(R2)
         LA        R3,71(R2)           COMPUTE END OF CARD
         NEXT      40,CTLCRDER
         MVI       TYPE,0
         CMPR      'UNLOAD ',CTLCRD3
         CMPR      'U ',CTLCRD4
         MVI       TYPE,4
         CMPR      'RELOAD ',CTLCRD3
         CMPR      'R ',CTLCRD4
         MVI       TYPE,8
         CMPR      'LIST ',CTLCRD3A
         CMPR      'L ',CTLCRD4
         B         CTLCRDER            ERROR
CTLCRD3  LA        R2,2(R2)            PROCESS CONTROL CARD OPERAND
CTLCRD3A LA        R2,3(R2)
CTLCRD4  LA        R2,2(R2)
         NEXT      16,CTLCRDER
CTLCRD4B CR        R2,R3               END OF CARD?
         BNL       CTLCRDER            ERROR
         CMPR      'FROMDD=',CTLCRD6A
         CMPR      'F=',CTLCRD6A+4
         CMPR      'TODD=',CTLCRD6B
         CMPR      'T=',CTLCRD6B+4
         CMPR      'REPLACE',CTLCRD5A
         CLI       0(R2),C'R'
         BE        CTLCRD5
         CMPR      'SELECT',CTLCRD7A
         CMPR      'EXCLUDE',CTLCRD7B
         CLI       0(R2),C'S'
         BE        CTLCRD7C
         CLI       0(R2),C'E'
         BE        CTLCRD7D
         CMPR      'LEAVE',CTLCRD8A
         CLI       0(R2),C'L'
         BE        CTLCRD8B
         B         CTLCRDER            ERROR
CTLCRD5A LA        R2,6(R2)
CTLCRD5  OI        SWA,SWA5            SET "REPLACE" SWITCH
         LA        R2,1(R2)
         B         CTLCRD7G
CTLCRD6A LA        R2,5(R2)            UPDATE POINTER . . . FROMDD
         LA        R2,2(R2)
         LA        R14,FROMDD
         B         CTLCRD6C
CTLCRD6B LA        R2,3(R2)            UPDATE POINTER . . . TODD
         LA        R2,2(R2)
         LA        R14,TODD
CTLCRD6C LA        R4,8                SET LENGTH
         CR        R2,R3               END OF CARD?
         BNL       CTLCRDER            ERROR
CTLCRD6D CLI       0(R2),C','          COMMA
         BE        CTLCRD6E            YES
         CLI       0(R2),C' '          END OF OPERAND
         BE        CTLCRDX
         IC        R0,0(R2)            GET CHAR
         STC       R0,0(R14)           AND SAVE IT
         LA        R2,1(R2)            UPDATE POINTERS
         LA        R14,1(R14)
         CR        R2,R3               END OF CARD
         BNL       CTLCRDX
         BCT       R4,CTLCRD6D
         CLI       0(R2),C' '
         BE        CTLCRDX
CTLCRD6E CLI       0(R2),C','          COMMA?
         BNE       CTLCRDER            ERROR
         LA        R2,1(R2)
         B         CTLCRD4B
CTLCRD7A LA        R2,6(R2)
         B         CTLCRD7F
CTLCRD7B LA        R2,7(R2)
         B         CTLCRD7E
CTLCRD7C LA        R2,1(R2)
         B         CTLCRD7F
CTLCRD7D LA        R2,1(R2)
CTLCRD7E OI        SWB,SWB7+SWB8
         B         CTLCRD7G
CTLCRD7F OI        SWB,SWB7
         NI        SWB,255-SWB8
CTLCRD7G CR        R2,R3
         BNL       CTLCRDX
         CLI       0(R2),C' '
         BE        CTLCRDX
         CLI       0(R2),C','
         BNE       CTLCRDER
         LA        R2,1(R2)
         B         CTLCRD4B
CTLCRD8A LA        R2,4(R2)
CTLCRD8B LA        R2,1(R2)
         OI        SWA,SWA6            FLAG LEAVE OPTION
         B         CTLCRD7G
**  GET NEXT CONTROL CARD
CTLCRDX  LA        R6,PNTR9
         XR        R8,R8
CTLCRDX1 BAL       R12,GETCARD
         B         CTLCRDA
         ST        R1,LASTCARD
         LR        R2,R1
         LA        R3,71(R1)
         NEXT      40,CTLCRDA
CTLCRDX3 LA        R1,2(R2)
         CMPR      'M ',CTLCRDX4
         LA        R1,7(R2)
         CMPR      'MEMBER ',CTLCRDA,TYPE=NE
CTLCRDX4 LR        R2,R1
         BAL       R12,PRINT1
         L         R15,LASTCARD
         MVC       5(80,R1),0(R15)
         NEXT      20,CTLCRDX1
CTLCRDX6 LTR       R8,R8
         BNZ       CTLCRDX7
         GETMAIN   R,LV=260
         ST        R1,0(R6)
         LA        R7,4(R1)
         LR        R6,R1
         XC        0(4,R1),0(R1)
         LA        R8,32
CTLCRDX7 MVC       0(8,R7),=CL8' '
         LR        R1,R7
         LA        R15,8
CTLCRDX8 CLI       0(R2),C' '
         BE        CTLCRDX9
         CLI       0(R2),C','
         BE        CTLCRDXA
         LTR       R15,R15
         BNP       *+18
         IC        R0,0(R2)
         STC       R0,0(R1)
         BCTR      R15,0
         LA        R1,1(R1)
         LA        R2,1(R2)
         CR        R2,R3
         BL        CTLCRDX8
CTLCRDX9 CH        R15,=H'8'
         BE        *+10
         LA        R7,8(R7)
         BCTR      R8,0
         B         CTLCRDX1
CTLCRDXA CH        R15,=H'8'
         BE        *+10
         LA        R7,8(R7)
         BCTR      R8,0
CTLCRDXB LA        R2,1(R2)
         CR        R2,R3
         BL        CTLCRDX7
         B         CTLCRDX1
**
**  GENERAL INITIALIZATION COMPLETE ... GO PROCESS THE REQUEST
**
CTLCRDA  CLI       FROMDD,C' '         CHECK IF PARMS SPECIFIED
         BE        CTLCRDAA
         CLI       TYPE,8              SKIP FOR LIST
         BE        *+12
         CLI       TODD,C' '
         BE        CTLCRDAA
         SR        R11,R11             CLEAR REG
         IC        R11,TYPE            PICK UP TYPE
         L         R11,TYPETBL(R11)
         BR        R11                 GOTO PROCESSOR
**
CTLCRDAA BAL       R12,PRINT1
         MVC       5(L'MSG04,R1),MSG04
         BAL       R12,PRINT1
         MVC       5(L'MSG01,R1),MSG01
         SETRC     RC2
         B         BEGIN
**  CONTROL CARD FORMAT ERROR
CTLCRDER BAL       R12,PRINT1
         MVC       5(L'MSG01,R1),MSG01
         SETRC     RC2
         BAL       R12,GETCARD
         B         BEGIN
         ST        R1,LASTCARD
         B         BEGIN
**
TYPETBL  DC        A(UNLOAD)           FOR DUMP
         DC        A(RELOAD)           FOR LOAD
         DC        A(RELOAD)           FOR LIST
 TITLE '           UNLOAD  OPERATION'
**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**
**  UNLOAD OPERATION INITIALIZATION                                 **
**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**
PDSUR1   CSECT
         USING     UNLOAD,R11
UNLOAD   MVC       TAPE+(DCBDDNAM-IHADCB)(L'DCBDDNAM),TODD
         MVC       PDS+(DCBDDNAM-IHADCB)(L'DCBDDNAM),FROMDD
         XC        PDSBUF1,PDSBUF1
         XC        ALLOCM,ALLOCM
         XC        ALLOCS,ALLOCS
         XC        PNTR5,PNTR5
         MVI       JFCB1,0
         MVI       JFCB2,0
         DEVTYPE   TODD,WORK1+8
         CLI       WORK1+10,X'80'
         BNE       *+8                 NOT TAPE
         OI        SWB,SWB4
         RDJFCB    (PDS,,TAPE)
         CLI       JFCB1,0             WAS PDS JFCB READ IN?
         BE        INIT1               NO
         CLI       JFCB2,0             TAPE JFCB OK?
         BE        INIT1CA             NO.
         OBTAIN    PDSDSCB
         MVC       DSNAME,JFCB1+JFCBDSNM
         INFOJFCB  JFCB1,JFCB2
**
**  INIT THE PDS FILE (FOR READING THE DIRECTORY)
**
         NI        SWX,255-SWX2        TURN OFF RECFM=V SWITCH
         OPEN      (PDS,(INPUT)),TYPE=J
         TM        PDS+(DCBOFLGS-IHADCB),OFLG  CHECK OPEN
         BO        INIT1A              OPEN OK
INIT1    BAL       R12,PRINT1          PRINT ERROR MSG FOR PDS FILE
         BAL       R12,PRINT1
         MVC       5(L'MSG08,R1),MSG08
         MVC       (L'MSG08+5)(L'FROMDD,R1),FROMDD
         SETRC     RC3
         B         BEGIN
INIT1A   OI        SWX,SWX2            SET FOR SECOND PASS (RECFM=V)
         MVC       PDS+(DCBLRECL-IHADCB)(2),=H'256'
         MVC       PDS+(DCBBLKSI-IHADCB)(2),=H'256'
**
**  ALLOCATE AND BUILD THE DIRECTORY TABLE
**
         LA        R2,PNTR1            INIT
         XR        R6,R6               FOR DIR BLOCK COUNTER
INIT1AA  GETMAIN   R,LV=260            GET CORE FOR ONE BLOCK
         XC        0(4,R1),0(R1)       INIT & LINK BLOCK
         ST        R1,0(R2)
         LA        R5,4(R1)
         LR        R2,R1
         MVI       6(R1),X'FF'
         MVC       4(2,R1),=H'4'
         BAL       R12,PDSIN           READ IN THE BLOCK
         B         INIT1AD             EOF RETURN
         LA        R6,1(R6)            UPDATE BLOCK COUNT
         STH       R6,USEDBLKS
         LH        R4,0(R5)            BLOCK "USED BYTES" COUNT
         LA        R4,0(R5,R4)         COMPUTE END OF BLOCK ADRS
         LA        R5,2(R5)            POINT TO BEGINNING OF BLOCK
         SR        R15,R15             CLEAR WORK REG
INIT1AB  CLI       0(R5),X'FF'         END OF DIRECTORY?
         BE        INIT1AC             YES.
         IC        R15,11(R5)          COMPUTE ADRS OF NEXT ENTRY
         N         R15,=F'31'
         SLL       R15,1
         LA        R5,12(R5,R15)
         CR        R5,R4               END OF BLOCK?
         BL        INIT1AB             NO.
         B         INIT1AA             YES, GO GET NEXT BLOCK
INIT1AC  GETMAIN   R,LV=260
         XC        0(4,R1),0(R1)
         ST        R1,0(R2)
         MVI       6(R1),X'FF'
         MVC       4(2,R1),=H'4'
         LA        R5,4(R1)            WAS LR R5,R1 - SOC4 TERM1B .FIX.
INIT1AC1 BAL       R12,PDSIN
         B         INIT1AD
         LA        R6,1(R6)
         B         INIT1AC1
INIT1AD  STH       R6,WORK1
         MVC       UNLDDIR(2),WORK1
**  SCAN DIRECTORY AND ELEMINATE "ALL ALIAS" ENTRIES
INIT1B   LA        R1,PNTR1            INIT FOR SCAN
         ST        R1,PNTR2
         XC        PNTR3A,PNTR3A
INIT1BA  BAL       R12,GETNTRY         GET A DIRECTORY ENTRY
         B         INIT1C              END OF SCAN
         TM        11(R1),ALIAS        IS ENTRY AN ALIAS?
         BZ        INIT1BA             NO.
         LR        R2,R1               SAVE PNTR TO ALIAS ENTRY
         MVC       SAVEPNTR(16),PNTR2  YES, SAVE POSITION
         LA        R1,PNTR1            AND INIT
         ST        R1,PNTR2
         XC        PNTR3A,PNTR3A
         SR        R3,R3
INIT1BB  BAL       R12,GETNTRY         GET A BLOCK
         B         INIT1BC             END OF DIRECTORY
         CLC       8(3,R2),8(R1)       TTR=TTR?
         BNE       INIT1BB             NO.
         TM        11(R1),ALIAS        IS THIS AN ALIAS?
         BZ        INIT1BD             NO, MUST BE MAIN NAME
         LTR       R3,R3               HAS AN ALIAS BEEN FOUND
         BNZ       INIT1BB             YES.
         LR        R3,R1               NO, USE THIS ONE
         B         INIT1BB
INIT1BC  NI        0(R3),255-ALIAS     NO MAIN FOUND, DELETE ALIAS
INIT1BD  MVC       PNTR2(16),SAVEPNTR  RESTORE TO PICK UP SCAN
         B         INIT1BA
**
**  INITIALIZE THE TAPE FILE & RE-INIT THE PDS DCB
**
INIT1C   MVC       PDS+(DCBRECFM-IHADCB)(1),SAVRECFM
         MVC       PDS+(DCBLRECL-IHADCB)(2),SAVLRECL
         MVC       PDS+(DCBBLKSI-IHADCB)(2),SAVBLKSI
         TM        SAVRECFM,RECF       RECFM=V?
         BO        INIT1C0X            NO, RECFM=U/F
         CLOSE     (PDS,LEAVE)         YES, RESET FOR RECFM=V
         MVI       PDS+(DCBRECFM-IHADCB),0
         XC        PDS+(DCBLRECL-IHADCB)(2),PDS+(DCBLRECL-IHADCB)
         XC        PDS+(DCBBLKSI-IHADCB)(2),PDS+(DCBBLKSI-IHADCB)
         OPEN      (PDS,(INPUT)),TYPE=J
INIT1C0X OPEN      (TAPE,(OUTPUT)),TYPE=J
         TM        TAPE+(DCBOFLGS-IHADCB),OFLG  CHECK OPEN
         BO        INIT1CB             OPEN OK
INIT1CA  BAL       R12,PRINT1          OPEN ERROR -- PRINT MSG
         BAL       R12,PRINT1
         MVC       5(L'MSG08,R1),MSG08
         MVC       (L'MSG08+5)(L'TODD,R1),TODD
         SETRC     RC3
         B         TERM1
**
**  OUTPUT THE HEADER RECORDS
**
INIT1CB  XC        PNTR8A,PNTR8A
         XC        PNTR8B,PNTR8B
         XC        TAPECNTR,TAPECNTR
         LA        R2,UNLREC1L         OUTPUT IBM'S ID RECORD
         LA        R3,UNLREC1
         BAL       R12,TAPEOUT
**  FORMAT & OUTPUT THE DATA SET DESCRIPTOR RECORD
**       DIR BLK COUNT ALREADY FILLED BY DIR READ ROUTINE
         XC        UNLDSPAR,UNLDSPAR
         XC        UNLDSIZE,UNLDSIZE
         XC        UNLDSSIZ,UNLDSSIZ
         DEVTYPE   FROMDD,WORK1+8,DEVTAB
         MVI       UNLDFLAG,X'40'
         MVC       UNLDDEVT,WORK1+8
**  COMPUTE SECONDARY ALLOCATION
         TM        DS1SCALO,X'80'      BLK OR ABS ALLOC?
         BZ        INIT1CC             YES, SKIP
         MVC       WORK1(4),DS1SCALO   COMPUTE SEC. ALLOC.
         L         R1,WORK1
         LA        R1,0(R1)            CLEAR TOP BYTE
         TM        WORK1+25,X'02'      2321?
         NOP       DEV2321X            YES      (WAS BO)          .FIX.
         TM        DS1SCALO,X'40'      CYL ALLOC?
         BZ        *+8                 NO.
         MH        R1,WORK1+18         YES, CONVERT CYL TO TRK
         ST        R1,ALLOCS
*        MH        R1,WORK1+20         CONVERT TRK TO BYTES      *.FIX.
         XC        WORK1(2),WORK1      IN CASE WORK1+20 > 7FFF    .FIX.
         MVC       WORK1+2(2),WORK1+20 IN CASE WORK1+20 > 7FFF    .FIX.
         M         R0,WORK1            CONVERT TRK TO BYTES       .FIX.
         ST        R1,WORK1
         MVC       UNLDSSIZ,WORK1
         B         INIT1CC
DEV2321X XR        R2,R2               COMPUTE SEC. ALLOC. FOR 2321
         IC        R2,WORK1+18
         STH       R2,WORK1
         TM        DS1SCALO,X'40'      CYL ALLOC?
         BZ        *+8                 NO
         MH        R1,WORK1            YES, CONVERT CYL TO TRK
         ST        R1,ALLOCS
         MH        R1,WORK1+20         CONVERT TRK TO BYTES
         ST        R1,WORK1
         MVC       UNLDSSIZ,WORK1
** COMPUTE PRIMARY ALLOCATION
INIT1CC  TM        WORK1+25,X'02'      2321?
         B         INIT1CCA            NO     (WAS BNO)           .FIX.
         XR        R1,R1               COMPUTE PRIMARY FOR 2321
         XR        R2,R2
         MVI       WORK1,0
         LA        R14,2
DEV2321A LA        R15,3
         LA        R3,DSCB+61
DEV2321B CLI       0(R3),0             LAST VALID EXT?
         BE        DEV2321C            YES
         IC        R2,4(R14,R3)
         AR        R1,R2
         IC        R2,0(R14,R3)
         SR        R1,R2
         LA        R3,10(R3)           POINT AT NEXT EXT.
         BCT       R15,DEV2321B        AND LOOP THRU 3 EXT.
DEV2321C CH        R14,=H'5'           DONE?
         BNL       INIT1CE             YES
         IC        R2,WORK1+15(R14)    GET MULT FACTOR
         STC       R2,WORK1+1
         MH        R1,WORK1            AND USE IT TO CONVERT
         LA        R14,1(R14)
         B         DEV2321A
INIT1CCA MVC       WORK1(8),DSCB+63    PROCESS CYL
         LH        R1,WORK1+4
         SH        R1,WORK1
         CLI       DSCB+71,0
         BE        INIT1CD
         MVC       WORK1(8),DSCB+73
         AH        R1,WORK1+4
         SH        R1,WORK1
         CLI       DSCB+81,0
         BE        INIT1CD
         MVC       WORK1(8),DSCB+83
         AH        R1,WORK1+4
         SH        R1,WORK1
INIT1CD  MH        R1,WORK1+18         CONVERT CYL TO TRK
         MVC       WORK1(8),DSCB+65    PROCESS TRK
         AH        R1,WORK1+4
         SH        R1,WORK1
         CLI       DSCB+71,0
         BE        INIT1CE
         MVC       WORK1(8),DSCB+75
         AH        R1,WORK1+4
         SH        R1,WORK1
         LA        R1,1(R1)            PLUS ONE
         CLI       DSCB+81,0
         BE        INIT1CE
         MVC       WORK1(8),DSCB+85
         AH        R1,WORK1+4
         SH        R1,WORK1
         LA        R1,1(R1)            PLUS ONE
INIT1CE  LA        R1,1(R1)            PLUS ONE
         ST        R1,ALLOCM
*        MH        R1,WORK1+20         CONVERT TRK TO BYTES      *.FIX.
         XC        WORK1(2),WORK1      IN CASE WORK1+20 > 7FFF    .FIX.
         MVC       WORK1+2(2),WORK1+20 IN CASE WORK1+20 > 7FFF    .FIX.
         M         R0,WORK1            CONVERT TRK TO BYTES       .FIX.
         ST        R1,WORK1
         MVC       UNLDSIZE,WORK1
         LA        R2,200              OUTPUT SECOND REC (REL 21)
         LA        R3,UNLREC2
         BAL       R12,TAPEOUT
**
**  LIST PDS CHARACTERISTICS
**
         INFOPDS1  DS1RECFM,DS1LRECL,DS1BLKL,MSG24A,MSG24B
         INFOPDS2
         MVC       75(14,R1),=C'DIR-BLKS-USED='
         LH        R0,USEDBLKS
         CVD       R0,WORK1
         OI        WORK1+7,X'0F'
         UNPK      89(3,R1),WORK1
         CH        R0,=H'999'
         BNH       *+10
         UNPK      89(5,R1),WORK1
         BAL       R12,PRINT1
         LA        R1,15(R1)
         MVC       1(L'MSG24C,R1),MSG24C
         L         R0,ALLOCM           MAIN ALLOC
         CVD       R0,WORK1
         OI        WORK1+7,X'0F'
         UNPK      12(5,R1),WORK1
         L         R0,ALLOCS           SEC. ALLOC
         CVD       R0,WORK1
         OI        WORK1+7,X'0F'
         UNPK      31(5,R1),WORK1
         BAL       R12,PRINT1
**
**  INIT OPERATION VARIABLES & ALLOCATE THE PDS BUFFER
**
         LA        R1,PNTR1            INIT POINTERS
         ST        R1,PNTR2
         XC        PNTR3A,PNTR3A
         LH        R0,PDS+(DCBBLKSI-IHADCB)  LENGTH OF BUFFER
         STH       R0,PDSBUFL
         GETMAIN   R,LV=(0)            ALLOCATE THE CORE
         ST        R1,PDSBUF1
**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**
**  UNLOAD THE PDS -- MEMBER BY MEMBER                              **
**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**
**
**  PROCESS DIRECTORY ENTRY
**
DUMP00   BAL       R12,GETNTRY         GET ONE DIRECTORY ENTRY
         B         TERM1               END OF DIRECTORY
         TM        11(R1),ALIAS        IS THIS AN ALIAS?
         BO        DUMP00              YES, SKIP IT
         LR        R6,R1               SAVE POINTER
         TM        SWB,SWB7            SELECT OR EXCLUDE?
         BZ        DUMP05
         SEARCH    PNTR9,C' ',R6,DUMP03,DUMP04
DUMP03   TM        SWB,SWB8
         BO        DUMP00              IGNORE, EXCLUDE
         B         DUMP05              PROCESS, SELECT
DUMP04   TM        SWB,SWB8
         BZ        DUMP00              IGNORE, SELECT
         B         DUMP05              PROCESS, EXCLUDE
DUMP05   XC        LLITTR,LLITTR       OUTPUT THE DIR ENTRY
         L         R1,PNTR3B
         STH       R1,LLI
         MVI       LLI+2,@PDS+@TTR+@DIR
         LA        R2,6
         LA        R3,LLI
         BAL       R12,TAPEOUT
         L         R2,PNTR3B
         LR        R3,R6
         BAL       R12,TAPEOUT
         MVC       TTR3,8(R6)          SAVE TTR TO INIT FOR DATA
         MVI       TTR3+3,0
**  INIT FOR NOTELISTS
         NI        SWA,255-(SWA4+SWA7) TURN OFF DONE SWITCH
         XR        R2,R2
         IC        R2,11(R6)
         SRL       R2,5
         N         R2,=F'3'
         LA        R7,12(R6)
         STH       R2,NLCNT
         LTR       R2,R2
         BNZ       *+8
         OI        SWA,SWA7            FLAG NO NOTELISTS
**
**  UNLOAD A MEMBER (PROCESSING ANY NOTELISTS)
**
DUMP10   TM        SWA,SWA7            ANY MORE NOTELISTS?
         BO        DUMP10B             NO
         CLI       3(R7),0             TTR FOR NOTELIST
         BNE       DUMP11              YES
DUMP10A  LA        R7,4(R7)            UPDATE TTR/NOTELIST PNTR
         LH        R2,NLCNT
         BCT       R2,*+8
         OI        SWA,SWA7            NO MORE NOTELISTS
         STH       R2,NLCNT
         B         DUMP10
DUMP10B  XC        LLI(6),LLI          OUTPUT DUMMY RECORD
         TM        SWA,SWA4            WAS NOTELIST PROCESSED?
         BZ        DUMP15              NO
         MVC       LLI(2),=H'20'
         MVI       LLI+2,@PDS+@TTR+@DUM
         LA        R2,6
         LA        R3,LLI
         BAL       R12,TAPEOUT
         XC        WORK1(20),WORK1
         LA        R2,20
         LA        R3,WORK1
         BAL       R12,TAPEOUT
         B         DUMP15A
DUMP11   MVC       TTR1,0(R7)
         MVI       TTR1+3,0
         POINT     PDS,TTR1            POSITION TO NOTELIST REC
         L         R5,PDSBUF1
         BAL       R12,PDSIN           AND READ IN THE NOTELIST
         B         DUMP40
         LH        R1,BLKLEN
         STH       R1,LLI
         MVI       LLI+2,@PDS+@TTR+@NL
         MVC       LLITTR(3),0(R7)
         LA        R2,6                OUTPUT THE NOTELIST REC
         LA        R3,LLI
         BAL       R12,TAPEOUT
         LH        R2,BLKLEN
         L         R3,PDSBUF1
         BAL       R12,TAPEOUT
         TM        SWA,SWA4
         BO        *+12
         OI        SWA,SWA4
         B         DUMP15
         OI        SWA,SWA4
         L         R5,PDSBUF1
         POINT     PDS,TTR3
         BAL       R12,PDSIN
         B         DUMP40
         B         DUMP15A
DUMP15   POINT     PDS,TTR3            POSITION TO MEMBER'S DATA
DUMP15A  L         R5,PDSBUF1
DUMP16   XC        LLI(6),LLI          OUTPUT THE DATA
         L         R5,PDSBUF1
         BAL       R12,PDSIN
         B         DUMP20
         NOTE      PDS
         ST        R1,TTR3
         TM        SWA,SWA7            NOTELIST PROCESSING?
         BO        *+14                NO
         CLC       TTR3(3),TTR1
         BE        DUMP10A
         MVC       LLITTR(3),TTR3
         LH        R1,BLKLEN
         STH       R1,LLI
         MVI       LLI+2,@PDS+@TTR+@MEM
         LA        R2,6                OUTPUT LLI & TTR
         LA        R3,LLI
         BAL       R12,TAPEOUT
         LH        R2,BLKLEN           OUTPUT DATA
         LR        R3,R5
         BAL       R12,TAPEOUT
         B         DUMP16
DUMP20   BAL       R12,PRINT1          OUTPUT EOM MSG
         MVC       11(L'MSG07,R1),MSG07
         MVC       L'MSG07+11(8,R1),0(R6)
         MVC       L'MSG07+19(L'MSG06,R1),MSG06
**
**  OUTPUT ANY ALIAS DIRECTORY ENTRIES FOR CURRENT MEMBER
**
DUMP30   MVC       SAVEPNTR(16),PNTR2  SAVE POSITION IN DIR TBL
         LA        R1,PNTR1            INIT FOR TBL SCAN
         XC        PNTR3A,PNTR3A
         ST        R1,PNTR2
DUMP31   BAL       R12,GETNTRY         GET ONE ENTRY
         B         DUMP35              END OF SCAN; GO PROC NEXT MEMBR
         TM        11(R1),ALIAS        IS THIS AN ALIAS?
         BZ        DUMP31              NO.
         CLC       8(3,R6),8(R1)       TTR=TTR?
         BNE       DUMP31              NO.
         LR        R4,R1               THIS IS AN ALIAS; PROCESS IT
         TM        SWB,SWB7+SWB8       EXCLUDE IN EFFECT?
         BNO       DUMP33              NO.
         SEARCH    PNTR9,C' ',R4,DUMP31,DUMP33
DUMP33   L         R2,PNTR3B
         STH       R2,LLI
         XC        LLITTR,LLITTR
         MVI       LLI+2,@PDS+@TTR+@DIR
         LA        R2,6
         LA        R3,LLI
         BAL       R12,TAPEOUT
         L         R2,PNTR3B
         LR        R3,R4
         BAL       R12,TAPEOUT
         BAL       R12,PRINT1          OUTPUT 'ALIAS UNLOADED' MSG
         MVC       11(L'MSG11,R1),MSG11
         MVC       L'MSG11+11(8,R1),0(R4)
         MVC       L'MSG11+19(L'MSG06,R1),MSG06
         B         DUMP31
DUMP35   MVC       PNTR2(16),SAVEPNTR  RESTORE TABLE POSITION
         B         DUMP00              AND CONTINUE
**
DUMP40   BAL       R12,PRINT1          ERROR READING NOTELIST
         MVC       5(L'MSG21,R1),MSG21
         MVC       L'MSG21+5(L'MSG09,R1),MSG09
         SETRC     RC2
         B         TERM1
**
**  END OF DUMP OPERATION:  TERMINATE
**
TERM1    TM        TAPE+(DCBOFLGS-IHADCB),OFLG
         BZ        TERM1X
         LA        R2,LASTRECL         OUTPUT LAST (MY ID) RECORD
         LA        R3,LASTREC
         BAL       R12,TAPEOUT
         TM        SWA,SWA6            LEAVE?
         BZ        TERM1V              NO.
         CLOSE     (TAPE,LEAVE)
         B         TERM1W
TERM1V   CLOSE     TAPE
TERM1W   LA        R1,TAPE
         BAL       R12,FREEPOOL
TERM1X   CLOSE     PDS
         L         R1,PDSBUF1          FREE PDS BUFFER
         LTR       R1,R1
         BZ        TERM1A              BUFF NOT ALLOCATED
         LH        R0,PDSBUFL
         FREEMAIN  R,LV=(0),A=(1)
TERM1A   L         R2,PNTR1            FREE DIRECTORY TABLE
TERM1B   LTR       R1,R2
         BZ        TERM1C
         L         R2,0(R2)
         FREEMAIN  R,LV=260,A=(1)
         B         TERM1B
TERM1C   L         R2,PNTR9
         XC        PNTR9,PNTR9
TERM1C1  LTR       R1,R2
         BZ        TERM1D
         L         R2,0(R2)
         FREEMAIN R,LV=260,A=(1)
         B         TERM1C1
TERM1D   LA        R15,2               PRINT END MSG
         BAL       R12,PRINTA
         MVI       0(R1),C'0'
         TM        SWA,SWA1            OPERATION ABORTED?
         BO        TERM1Z              YES
         MVC       5(L'MSG03,R1),MSG03
         B         BEGIN
TERM1Z   MVC       5(L'MSG12,R1),MSG12
         B         BEGIN
 SPACE 4
**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**
**  LOCATE THE NEXT DIRECTORY ENTRY & RETURN ADRS IN R1
**       RETURN = 4(R12) FOR NORMAL RETURN
**       RETURN = 0(R12) FOR END OF DIRECTORY
GETNTRY  L         R1,PNTR3A           CHECK BYTE COUNT
         LTR       R1,R1
         BP        GETNTRY1            STILL SOME LEFT
         L         R15,PNTR2           GET NEXT BLOCK
         LTR       R15,R15             END OF TABLE?
         BZR       R12                 YES.
         L         R15,0(R15)
         ST        R15,PNTR2
         LH        R0,4(R15)           BLOCK BYTE COUNT
         SH        R0,=H'2'
         LA        R1,6(R15)           ADRS OF DATA
         ST        R0,PNTR3A
         ST        R1,PNTR3
         B         GETNTRY2
GETNTRY1 L         R1,PNTR3            COMPUTE ADRS OF NEXT ENTRY
         AL        R1,PNTR3B
         ST        R1,PNTR3
GETNTRY2 SR        R15,R15             COMPUTE LEN & UPDATE BYTE CNT
         IC        R15,11(R1)
         N         R15,=F'31'
         SLL       R15,1
         LA        R15,12(R15)
         ST        R15,PNTR3B
         LCR       R15,R15
         A         R15,PNTR3A
         ST        R15,PNTR3A
         CLI       0(R1),X'FF'         CHECK FOR END OF DIRECTORY
         BNE       4(R12)
         BR        R12                 END OF DIRECTORY
 SPACE 4
**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**
**  READ IN A BLOCK FROM THE PDS
**       NORMAL RETURN - OFFSET=4
**       EOF RETURN    - OFFSET=0
PDSIN    XC        DECBIN,DECBIN       CLEAR THE ECB
         READ      DECBIN,SF,PDS,(R5),'S'
         CHECK     DECBIN
         L         R15,DECBIN+16       COMPUTE & SAVE LENGTH
         LH        R14,PDS+(DCBBLKSI-IHADCB)
         SH        R14,14(R15)
         STH       R14,BLKLEN
         B         4(R12)              RETURN TO CALLER
PDSEOF   BR        R12                 EOF RETURN
 SPACE 4
**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**
**  OUTPUT UNLOADED RECORDS TO TAPE
TAPEOUT  LTR       R2,R2               ANY BYTES LEFT?
         BNPR      R12                 NO, RETURN
         LM        R14,R15,PNTR8A      LOAD BUFFER PARMS
         LTR       R1,R15              ANY SPACE AVAILABLE?
         BNP       TAPEOUT2            NO, GO GET NEW REC
         CR        R2,R15              COMPARE REQUEST TO AVAILABLE
         BH        TAPEOUT1            REQUEST GREATER
         LA        R0,0(R2,R14)        PROCESS SMALL REQUEST
         SR        R1,R2
         STM       R0,R1,PNTR8A
         BCTR      R2,0
         EX        R2,TAPEOUTM
         BR        R12
TAPEOUT1 BCTR      R15,0
         EX        R15,TAPEOUTM
         SR        R2,R1
         AR        R3,R1
TAPEOUT2 PUT       TAPE
         LA        R14,2(R1)
         LA        R15,78
         STM       R14,R15,PNTR8A
         LH        R15,TAPECNTR
         LA        R15,1(R15)
         STH       R15,TAPECNTR
         STH       R15,0(R1)
         B         TAPEOUT             TO CONTINUE
TAPEOUTM MVC       0(0,R14),0(R3)
 TITLE '           RELOAD OPERATION'
**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**
**  RELOAD  OPERATION                                               **
**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**
PDSUR2   CSECT
         USING     RELOAD,R11
RELOAD   MVC       TAPE+(DCBDDNAM-IHADCB)(L'DCBDDNAM),FROMDD
         MVC       PDS+(DCBDDNAM-IHADCB)(L'DCBDDNAM),TODD
         XC        PNTR1,PNTR1
         XC        PNTR2,PNTR2
         XC        PDSBUF1,PDSBUF1
         XC        PNTR4,PNTR4
         XC        PNTR5,PNTR5
         MVI       JFCB1,0
         MVI       JFCB2,0
         DEVTYPE   FROMDD,WORK1+8
         CLI       WORK1+10,X'80'
         BNE       *+8                 NOT TAPE
         OI        SWB,SWB4
         CLI       TYPE,8              LIST?
         BNE       INIT2L              NO.
         RDJFCB    TAPE
         B         INIT2LA
INIT2L   RDJFCB    (PDS,,TAPE)
         CLI       JFCB1,0
         BE        INIT2X
INIT2LA  CLI       JFCB2,0
         BE        INIT2Y
         INFOJFCB  JFCB2,JFCB1,TYPE=2
**
**  INIT THE TAPE FILE
**
         OPEN      (TAPE,(INPUT)),TYPE=J
         TM        TAPE+(DCBOFLGS-IHADCB),OFLG  CHECK OPEN
         BO        INIT2A
INIT2Y   BAL       R12,PRINT1          PRINT ERROR MSG
         BAL       R12,PRINT1
         MVC       5(L'MSG08,R1),MSG08
         MVC       (L'MSG08+5)(L'FROMDD,R1),FROMDD
         SETRC     RC3
         B         BEGIN
INIT2A   XC        PNTR8A,PNTR8A       INIT & GET HEADER REC
         XC        PNTR8B,PNTR8B
         XC        TAPECNTR,TAPECNTR
         LA        R2,UNLREC1L
         LA        R3,WORKAREA
         TAPEIN    LOAD11,LOAD11
         CLC       UNLREC1(UNLREC1L),WORKAREA
         BE        INIT2A2             ID IS OK.
INIT2A1  BAL       R12,PRINT1          NOT HEADER--PRINT MSG
         MVC       5(L'MSG13,R1),MSG13
         SETRC     RC3
         OI        SWA,SWA1
         B         TERM2
INIT2A2  LA        R2,3                GET LLI OF SECOND REC
         LA        R3,WORK1
         TAPEIN    LOAD11,LOAD11
         CLC       UNLREC2,WORK1       LLI OK (REL 21)?
         BE        *+10                YES.
         CLC       =X'00C800',WORK1    NO, TRY LLI FOR PRIOR REL 21
         BNE       INIT2A1             NO
         LH        R2,WORK1            'LL' TO READ IN OLD DSCB
         LA        R3,WORKAREA
         TAPEIN    LOAD11,LOAD11
**
**  INIT THE PDS FILE
**
         CLI       TYPE,8              LIST?
         BE        INIT2D              YES, SKIP.
         TM        SWA,SWA5            STOW ADD OR REPLACE?
         BO        INIT2C              REPLACE
         MVC       PDSDIR+(DCBDDNAM-IHADCB)(L'DCBDDNAM),TODD
         OPEN      (PDSDIR,(INPUT)),TYPE=J
         TM        PDSDIR+(DCBOFLGS-IHADCB),OFLG
         BZ        INIT2X
         GETMAIN   R,LV=260            CORE FOR BUFFER BLOCK
         ST        R1,PNTR1
         GETMAIN   R,LV=260
         XC        0(4,R1),0(R1)
         ST        R1,PNTR2
         LA        R3,4(R1)
         LR        R2,R1
         MVI       4(R1),X'FF'
         LA        R6,32
INIT2BA  XC        DIRDECB,DIRDECB
         L         R5,PNTR1
         READ      DIRDECB,SF,PDSDIR,(R5),'S'
         CHECK     DIRDECB
         LH        R4,0(R5)
         LA        R4,0(R5,R4)
         LA        R5,2(R5)
INIT2BB  BCT       R6,INIT2BC
         GETMAIN   R,LV=260
         XC        0(4,R1),0(R1)
         ST        R1,0(R2)
         LA        R3,4(R1)
         LR        R2,R1
         MVI       4(R1),X'FF'
         LA        R6,31
INIT2BC  MVC       0(8,R3),0(R5)
         LA        R3,8(R3)
         CLI       0(R5),X'FF'
         BE        INIT2BZ
         IC        R15,11(R5)
         N         R15,=F'31'
         SLL       R15,1
         LA        R5,12(R5,R15)
         CR        R5,R4
         BL        INIT2BB
         B         INIT2BA
DIREOF   LTR       R6,R6
         BNP       *+8
         MVI       0(R3),X'FF'
INIT2BZ  L         R1,PNTR1
         FREEMAIN  R,LV=260,A=(1)
         XC        PNTR1,PNTR1
         CLOSE     (PDSDIR,LEAVE)
INIT2C   MVC       SAVRECFM,DS1RECFM
         MVC       SAVLRECL,DS1LRECL
         MVC       SAVBLKSI,DS1BLKL
         OPEN      (PDS,(OUTPUT)),TYPE=J   AND OPEN THE FILE
         TM        PDS+(DCBOFLGS-IHADCB),OFLG  CHECK OPEN
         BO        INIT2D              OPEN OK
INIT2X   BAL       R12,PRINT1          OPEN ERROR--PRINT MSG
         BAL       R12,PRINT1
         MVC       5(L'MSG08,R1),MSG08
         MVC       (L'MSG08+5)(L'TODD,R1),TODD
         SETRC     RC3
         OI        SWA,SWA1
         B         TERM2
**
**  LIST PDS CHARACTERISTICS
**
INIT2D   INFOPDS1  DS1RECFM,DS1LRECL,DS1BLKL,MSG24D,MSG24B
         INFOPDS2
         CLI       TYPE,8              LIST?
         BE        INIT2FA             YES, SKIP.
         INFOPDS1  PDS+(DCBRECFM-IHADCB),PDS+(DCBLRECL-IHADCB),        +
               PDS+(DCBBLKSI-IHADCB),MSG24E,MSG24F
         BAL       R12,PRINT1
**
**  PROCESS/CHECK THE PDS'S DCB PARAMETERS
**
         MVC       WORK1(1),SAVRECFM   CHECK RECFM
         MVC       WORK1+1(1),PDS+(DCBRECFM-IHADCB)
         NC        WORK1(2),=X'C0C0'
         CLC       WORK1(1),WORK1+1
         BNE       INIT2E              NO--ERROR
         TM        PDS+(DCBRECFM-IHADCB),RECV
         BO        INIT2F              NOT RECFM=F/FB
         TM        PDS+(DCBRECFM-IHADCB),RECF
         BNO       INIT2F              NOT RECFM=F/FB
         TM        SAVRECFM,RECFB
         BO        INIT2D4             OLD RECFM=FB
         TM        PDS+(DCBRECFM-IHADCB),RECFB
         BO        INIT2D2             NEW RECFM=FB
INIT2D1  CLC       SAVBLKSI,PDS+(DCBBLKSI-IHADCB)  BOTH RECFM=F
         BNE       INIT2E              BLKSIZE ERROR
         B         INIT2F
INIT2D2  CLC       SAVBLKSI,PDS+(DCBBLKSI-IHADCB)  OLD=F, NEW=FB
         BE        *+8
         OI        SWB,SWB1            FLAG REBLOCKING.
         CLC       SAVBLKSI,PDS+(DCBLRECL-IHADCB)
         BNE       INIT2E              RECLEN ERROR
         B         INIT2F
INIT2D4  TM        PDS+(DCBRECFM-IHADCB),RECFB   OLD RECFM=FB
         BO        INIT2D5             NEW RECFM=FB (ALSO)
         OI        SWB,SWB1            FLAG REBLOCKING, NEW RECFM=F
         CLC       SAVLRECL,PDS+(DCBBLKSI-IHADCB)
         BNE       INIT2E              RECLEN ERROR
         B         INIT2F
INIT2D5  CLC       SAVLRECL,PDS+(DCBLRECL-IHADCB)    BOTH RECFM=FB
         BNE       INIT2E              RECLEN ERROR
         CLC       SAVBLKSI,PDS+(DCBBLKSI-IHADCB)
         BE        INIT2F
         OI        SWB,SWB1            BLKSIZE UNEQUAL, REBLOCK
         B         INIT2F
INIT2E   BAL       R12,PRINT1          DCB PARM ERR--PRINT MSG
         MVC       5(L'MSG16,R1),MSG16
         SETRC     RC3
         OI        SWA,SWA1
         B         TERM2
**
**  INIT OPERATION PARAMETERS & ALLOCATE THE PDS BUFFER
**
INIT2F   TM        SWB,SWB1            REBLOCKING?
         BZ        INIT2FA             NO.
         BAL       R12,PRINT1          YES, ISSUE MSG.
         MVC       5(L'MSG23,R1),MSG23
         BAL       R12,PRINT1
INIT2FA  GETMAIN   R,LV=260
         ST        R1,PNTR4
         CLI       TYPE,8              LIST?
         BE        LOAD00              YES, SKIP
         LH        R0,PDS+(DCBBLKSI-IHADCB)  GET LENGTH
         TM        SWB,SWB1            REBLOCK?
         BZ        *+8                 NO.
         AH        R0,SAVBLKSI         YES, INCREASE BUFFER
         STH       R0,PDSBUFL
         GETMAIN   R,LV=(0)
         ST        R1,PDSBUF1
         LR        R5,R1
         TM        SWB,SWB1            REBLOCK?
         BZ        INIT2FB             NO.
         MVC       PDSBUF2B+2(2),PDS+(DCBBLKSI-IHADCB)
         AH        R1,SAVBLKSI
         ST        R1,PDSBUF2A
         MVC       PDSBUF2C,PDSBUF2A
         XC        PDSBUF2D,PDSBUF2D
         OI        SWB,SWB2
**  COMPUTE MAX NOTELIST LENGTH
INIT2FB  LA        R1,1024             FOR RECFM = U OR V
         TM        PDS+(DCBRECFM-IHADCB),RECF  RECFM=F
         BNO       *+18                NO
         LH        R1,PDS+(DCBLRECL-IHADCB)
         LTR       R1,R1
         BP        *+8
         LH        R1,PDS+(DCBBLKSI-IHADCB)
         STH       R1,PNTR5L
**
**  LOAD THE PDS
**
LOAD00   LA        R2,3                GET THE LLI
         LA        R3,LLI
         TAPEIN    LOAD11,LOAD11
         TM        LLI+2,@TTR          TTR PRESENT?
         BZ        LOAD01              NO
         LA        R2,3                YES, GET IT.
         LA        R3,LLITTR
         TAPEIN    LOAD11,LOAD11
LOAD01   TM        LLI+2,@END          END OF INPUT?
         BO        LOAD20X             YES.
         TM        LLI+2,@DIR          DIRECTORY RECORD?
         BO        LOAD20              YES
         CLI       TYPE,8              LIST?
         BE        LOAD60              YES, SKIP PROCESSING (FLUSH).
         TM        SWB,SWB5            FLUSH?
         BO        LOAD60              YES.
         TM        LLI+2,@MEM          MEMBER'S DATA?
         BO        LOAD30              YES
         TM        LLI+2,@NL           NOTE LIST?
         BO        LOAD40              YES
         TM        LLI+2,@DUM
         BO        LOAD50              FOR DUMMY RECORD
         B         LOAD11              ERROR
**  ERROR HANDLERS
LOAD10   LA        R15,2
         BAL       R12,PRINTA
         MVI       0(R1),C'0'
         MVC       5(L'MSG09,R1),MSG09
         OI        SWA,SWA1
         B         TERM2
LOAD11   BAL       R12,PRINT1
         MVC       5(L'MSG05,R1),MSG05
         SETRC     RC2
         B         LOAD10
**
**  PROCESS DIRECTORY ENTRY
**
LOAD20   LH        R2,LLI              READ IN THE RECORD
         L         R3,PNTR4
         LA        R3,148(R3)
         LR        R7,R3
         TAPEIN    LOAD11,LOAD11
LOAD20X  CLI       TYPE,8              LIST?
         BE        LOAD28              YES.
         TM        SWA,SWA8            HAS ENTRY BEEN STOWED?
         BZ        LOAD21              YES
         TM        SWB,SWB2            REBLOCK?
         BZ        LOAD20Y             NO.
         L         R1,PDSBUF2D
         LTR       R1,R1               ANY DATA TO OUTPUT?
         BNP       LOAD20Y             NO.
         L         R5,PDSBUF2A         YES, OUTPUT IT.
         BAL       R12,PDSOUT
         XC        PDSBUF2D,PDSBUF2D
         MVC       PDSBUF2C,PDSBUF2A
LOAD20Y  NI        SWB,255-SWB3
         NI        SWA,255-SWA8
         L         R2,PNTR4
         LA        R2,74(R2)
         STOW      PDS,(R2),R
         LR        R4,R15              SAVE STOW'S RC
         BAL       R12,PRINT1
         MVC       11(L'MSG07,R1),MSG07
         MVC       L'MSG07+11(8,R1),0(R2)
         BAL       R12,STOWMSG
LOAD21   TM        LLI+2,@END          END?
         BO        TERM2               YES.
         TM        11(R7),ALIAS        IS THIS AN ALIAS?
         BZ        LOAD25              NO
         TM        SWB,SWB5            FLUSH?
         BO        LOAD00              YES, SKIP ALIAS PROCESSING
         TM        SWB,SWB7            SELECT OR EXCLUDE?
         BZ        LOAD21V             NO.
         SEARCH    PNTR9,C' ',R7,LOAD21S,LOAD21T
LOAD21S  TM        SWB,SWB8            FOUND
         BO        LOAD00              EXCLUDE...IQNORE
         B         LOAD21V             SELECT...PROCESS
LOAD21T  TM        SWB,SWB8            NOT FOUND
         BZ        LOAD00              SELECT...SKIP PROCESSING
LOAD21V  TM        SWA,SWA5            ADD OR REPLACE?
         BO        LOAD21X             REPLACE.
         SEARCH    PNTR2,X'FF',R7,LOAD21W,LOAD21X
LOAD21W  BAL       R12,PRINT1
         MVC       11(L'MSG11,R1),MSG11
         MVC       L'MSG11+11(8,R1),0(R7)
         MVC       L'MSG11+19(L'MSG15B,R1),MSG15B
         B         LOAD00
LOAD21X  L         R2,PNTR4            YES, PROCESS IT
         MVC       8(3,R7),82(R2)      SET MAIN TTR FOR ALIAS
         OI        SWA,SWA3            FLAG ALIAS PROCESSING
         LH        R1,NLCNT
         LTR       R1,R1
         BZ        LOAD21B             NO USER TTR'S
         LA        R2,12(R2)
         LA        R3,12(R7)
LOAD21A  MVC       0(3,R3),74(R2)      UPDATE USER TTR'S
         LA        R2,4(R2)
         LA        R3,4(R3)
         BCT       R1,LOAD21A
LOAD21B  STOW      PDS,(R7),R
         LR        R4,R15              SAVE STOW'S RC
         BAL       R12,PRINT1
         MVC       11(L'MSG11,R1),MSG11
         MVC       L'MSG11+11(8,R1),0(R7)
         BAL       R12,STOWMSG
         NI        SWA,255-SWA3        RESET ALIAS FLAG
         B         LOAD00
**
LOAD25   L         R2,PNTR4            GET NEW DIR
         MVC       0(74,R2),148(R2)
         MVC       74(74,R2),148(R2)
         OI        SWA,SWA8            TURN ON DIR SWITCH
         NI        SWB,255-(SWB5+SWB6) TURN OFF FLUSH FLAGS
         XR        R1,R1
         IC        R1,11(R2)
         SRL       R1,5
         N         R1,=F'3'
         STH       R1,NLCNT
         NI        SWB,255-SWB2
         TM        SWB,SWB1            REBLOCKING?
         BZ        *+14
         LTR       R1,R1               ANY TTRN?
         BNZ       *+8                 YES, NO REBLOCK.
         OI        SWB,SWB2            SET FOR REBLOCK
         TM        SWB,SWB7            SELECT OR EXCLUDE?
         BZ        LOAD27              NO.
         SEARCH    PNTR9,C' ',R2,LOAD26A,LOAD26B
LOAD26A  TM        SWB,SWB8            FOUND
         BO        LOAD26C             EXCLUDE...FLUSH
         B         LOAD27
LOAD26B  TM        SWB,SWB8            NOT FOUND
         BO        LOAD27              EXCLUDE..PROCESS
LOAD26C  NI        SWA,255-SWA8        FLUSH
         OI        SWB,SWB5
         B         LOAD00
LOAD27   TM        SWA,SWA5            ADD OR REPLACE?
         BO        LOAD00              REPLACE...CONTINUE
         SEARCH    PNTR2,X'FF',R2,LOAD27A,LOAD00
LOAD27A  NI        SWA,255-SWA8        FLUSH
         OI        SWB,SWB5
         BAL       R12,PRINT1
         MVC       11(L'MSG07,R1),MSG07
         MVC       L'MSG07+11(8,R1),0(R2)
         MVC       L'MSG07+19(L'MSG15,R1),MSG15
         B         LOAD00
**  'LIST' PROCESSOR
LOAD28   TM        LLI+2,@END          END OF TAPE?
         BO        TERM2               YES, DONE.
         BAL       R12,PRINT1          PRINT LIST MESSAGE
         MVC       11(L'MSG07,R1),MSG07
         MVC       L'MSG07+11(8,R1),0(R7)
         TM        11(R7),ALIAS
         BZ        *+10
         MVC       11(L'MSG11,R1),MSG11
         B         LOAD00
**
**  PROCESS DATA RECORD
**
LOAD30M  MVC       0(0,R5),0(R2)
**
LOAD30   LH        R2,LLI              GET THE RECORD FROM TAPE
         L         R3,PDSBUF1
         TAPEIN    LOAD11,LOAD11
         TM        SWB,SWB2            REBLOCK?
         BO        LOAD35              YES
         LH        R1,LLI              STD. OUTPUT TO THE PDS
         L         R5,PDSBUF1
         BAL       R12,PDSOUT
         MVC       TTR1,LLITTR
         BAL       R12,UPDIR
         LH        R15,PNTR5NL
         LTR       R15,R15
         BZ        LOAD00
         L         R14,PNTR5A
         CLC       LLITTR,0(R14)
         BNE       LOAD00
         MVC       0(3,R14),TTR2
         LA        R14,4(R14)
         BCTR      R15,0
         ST        R14,PNTR5A
         STH       R15,PNTR5NL
         B         LOAD00
LOAD35   L         R2,PDSBUF1
         LH        R3,LLI
         L         R4,PDSBUF2D
         L         R5,PDSBUF2C
LOAD36   LH        R15,PDS+(DCBLRECL-IHADCB)
         SR        R3,R15
         AR        R4,R15
LOAD36A  CH        R15,=H'256'
         BNH       LOAD36B
         MVC       0(256,R5),0(R2)
         LA        R2,256(R2)
         LA        R5,256(R5)
         SH        R15,=H'256'
         B         LOAD36A
LOAD36B  BCTR      R15,0
         EX        R15,LOAD30M
         LA        R2,1(R2,R15)
         LA        R5,1(R5,R15)
         C         R4,PDSBUF2B
         BL        LOAD37
         LR        R1,R4
         L         R5,PDSBUF2A
         ST        R5,PDSBUF2C
         XR        R4,R4
         BAL       R12,PDSOUT
         TM        SWB,SWB3            FIRST TIME THRU?
         BO        LOAD37              NO, SKIP DIR UPDATE
         OI        SWB,SWB3
         MVC       TTR1,LLITTR
         BAL       R12,UPDIR
LOAD37   LTR       R3,R3
         BP        LOAD36
         ST        R4,PDSBUF2D
         ST        R5,PDSBUF2C
         B         LOAD00
**
**  PROCESS NOTELIST RECORD
**
LOAD40   L         R4,PNTR5
         LTR       R4,R4
         BNZ       LOAD41
         LH        R0,PNTR5L
         GETMAIN   R,LV=(0)
         ST        R1,PNTR5
         LR        R4,R1
LOAD41   TM        SWA,SWA7            NOTELIST TO OUTPUT?
         BZ        LOAD42              NO
         NI        SWA,255-SWA7        YES
         L         R5,PNTR5
         LH        R1,PNTR5CNT
         BAL       R12,PDSOUT
         MVC       TTR1(3),TTR3
         BAL       R12,UPDIR           UPDATE DIRECTORY ENTRY
LOAD42   TM        LLI+2,@DUM          PROCESSING DUMMY INPUT?
         BO        LOAD00              YES, DONE.
         LH        R2,LLI              NO, GET NEXT NOTELIST
         L         R3,PNTR5
         TAPEIN    LOAD11,LOAD11
         OI        SWA,SWA7
         MVC       PNTR5CNT,LLI
         MVC       PNTR5A,PNTR5
         L         R14,PNTR4
         LH        R15,NLCNT
         LA        R14,12(R14)
         XR        R1,R1
LOAD43   CLC       LLITTR,0(R14)
         BNE       *+16
         IC        R1,3(R14)
         STH       R1,PNTR5NL
         B         LOAD44
         LA        R14,4(R14)
         BCT       R15,LOAD43
LOAD44   MVC       TTR3(3),LLITTR
         B         LOAD00
**
**  PROCESS DUMMY INPUT RECORD
**
LOAD50   LH        R2,LLI
         LA        R3,WORK1
         LTR       R2,R2
         BNP       LOAD51
         TAPEIN    LOAD11,LOAD11
LOAD51   B         LOAD41              TO PROCESS ANY NOTELISTS
**
**  FLUSH INPUT FOR THIS ENTRY
**
LOAD60   OI        SWB,SWB6            TURN ON TAPEIN'S FLAG
         LH        R2,LLI              LENGTH OF DATA TO SKIP
         TAPEIN    LOAD11,LOAD11
         NI        SWB,255-SWB6        TURN FLAG OFF
         B         LOAD00
**
**  END OF OPERATION:  TERMINATE
**
TERM2    TM        TAPE+(DCBOFLGS-IHADCB),OFLG
         BZ        TERM2X
         TM        SWA,SWA6            LEAVE TAPE?
         BZ        TERM2V              NO.
         CLOSE     (TAPE,LEAVE)
         B         TERM2W
TERM2V   CLOSE     TAPE
TERM2W   LA        R1,TAPE
         BAL       R12,FREEPOOL
TERM2X   CLOSE     PDS
         L         R1,PDSBUF1          FREE THE PDS BUFFER
         LTR       R1,R1
         BZ        TERM2A              NO BUFFER ALLOCATED
         LH        R0,PDSBUFL
         FREEMAIN  R,LV=(0),A=(1)
**  FREE CORE FOR ANY ALLOCATED AREAS
TERM2A   L         R1,PNTR4
         LTR       R1,R1
         BZ        TERM2B
         FREEMAIN  R,LV=260,A=(1)
TERM2B   L         R1,PNTR5
         LTR       R1,R1
         BZ        TERM2C
         LH        R0,PNTR5L
         FREEMAIN  R,LV=(0),A=(1)
TERM2C   L         R1,PNTR1
         LTR       R1,R1
         BNP       TERM2D
         FREEMAIN  R,LV=260,A=(1)
TERM2D   L         R2,PNTR2
         XC        PNTR2,PNTR2
TERM2D1  LTR       R1,R2
         BZ        TERM2E
         L         R2,0(R2)
         FREEMAIN  R,LV=260,A=(1)
         B         TERM2D1
TERM2E   L         R2,PNTR9
         XC        PNTR9,PNTR9
TERM2E1  LTR       R1,R2
         BZ        TERM2Z
         L         R2,0(R2)
         FREEMAIN  R,LV=260,A=(1)
         B         TERM2E1
TERM2Z   TM        SWA,SWA1            ABORT?
         BO        BEGIN
         LA        R15,2               PRINT TERM MSG
         BAL       R12,PRINTA
         MVI       0(R1),C'0'
         MVC       5(L'MSG03,R1),MSG03
         B         BEGIN
 SPACE 4
**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**
**  PDS OUTPUT PROCESSOR
PDSOUT   STH       R1,PDS+(DCBBLKSI-IHADCB)
         WRITE     DECBOUT,SF,PDS,(R5),'S'
         CHECK     DECBOUT
         NOTE      PDS
         ST        R1,TTR2
         BR        R12
 SPACE 4
**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**
**  STOW MESSAGE HANDLERS
STOWMSG  B         *+4(R4)             PROCESS STOW RETURN CODE
         B         STOWMSGA            RC=00
         B         STOWMSGE            RC=04
         B         STOWMSGC            RC=08
         B         STOWMSGD            RC=12
         B         STOWMSGE            RC=16
STOWMSGA MVC       26(L'MSG14,R1),MSG14
         BR        R12
STOWMSGC MVC       26(L'MSG10,R1),MSG10
         BR        R12
STOWMSGD MVC       26(L'MSG17,R1),MSG17
         SETRC     RC3
         B         LOAD10
STOWMSGE MVC       26(L'MSG18,R1),MSG18
         SETRC     RC3
         B         LOAD10
 SPACE 4
**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**
**  UPDATE DIRECTORY TTR'S
UPDIR    L         R14,PNTR4
         CLC       TTR1(3),8(R14)
         BNE       UPDIRA
         MVC       82(3,R14),TTR1
         BR        R12
UPDIRA   LH        R15,NLCNT
         LTR       R15,R15
         BZR       R12
         LA        R14,12(R14)
UPDIRB   CLC       TTR1(3),0(R14)
         BNE       UPDIRC
         MVC       74(3,R14),TTR2
UPDIRC   LA        R14,4(R14)
         BCT       R15,UPDIRB
         BR        R12
 TITLE '           END OF TASK PROCESSING'
**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**
**  END OF TASK PROCESSING                                          **
**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**
PDSUR    CSECT
ENDTASK  CLOSE     SYSIN
         LA        R1,SYSIN
         BAL       R12,FREEPOOL
ENDTASK2 BAL       R12,PRINT1
         BAL       R12,PRINT1
         MVC       5(L'MSG02,R1),MSG02
         CLOSE     SYSPRINT
         LA        R1,SYSPRINT         FOR FREEPOOL
         BAL       R12,FREEPOOL
         STAE      0                   CANCEL THE STAE
         LH        R15,RETCOD
         L         R13,4(R13)          RESTORE OLD SAVE AREA
         RETURN    (14,12),T,RC=(15)
 TITLE '           SYNCHRONOUS ERROR HANDLING'
**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**
**  SYNCHRONOUS  ERROR  HANDLING                                    **
**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**
SYNERR1  SYNADAF   ACSMETH=BPAM
         STM       R14,R12,SYNSAV
         LR        R2,R1               SAVE PNTR TO MSG
         BAL       R12,PRINT1          PRINT THE MSG
         BAL       R12,PRINT1
         MVC       5(L'MSG19,R1),MSG19
         BAL       R12,PRINT1
         MVC       15(78,R1),50(R2)
         SETRC     RC2
         LM        R14,R12,SYNSAV      RESTORE THE REGS
         SYNADRLS
         OI        SWA,SWA1            SET TERM FLAG
         XR        R15,R15
         IC        R15,TYPE
         L         R15,ATERM(R15)      ADRS OF APPROPRIATE TERMINATOR
         BR        R15
ATERM    DC        A(TERM1,TERM2)
 TITLE '           SUBROUTINES'
**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**
**  PROCESS PAGING AND SET UP FOR PRINTING
PRINT1   LA        R15,1               SET TO ONE LINE
         B         PRINTA
PRINT2   LA        R15,256             FOR PAGE EJECT
**
PRINTA   AH        R15,PCNT
         STH       R15,PCNT
         CH        R15,PLIM
         BNH       PRINTB
         MVC       PCNT,=H'4'
         PUT       SYSPRINT
         BAL       R14,CLEARBUF
         MVI       0(R1),C'1'
         MVC       2(L'HEADING,R1),HEADING
         MVC       110(4,R1),=C'PAGE'
         LH        R15,PNUM            UPDATE AND FORMAT PAGE NO.
         LA        R15,1(R15)
         STH       R15,PNUM
         CVD       R15,WORK1
         OI        WORK1+7,X'0F'
         UNPK      116(4,R1),WORK1(8)
         PUT       SYSPRINT
         BAL       R14,CLEARBUF
         MVI       0(R1),C'0'          DOUBLE SPACE
PRINTB   PUT       SYSPRINT
         BAL       R14,CLEARBUF
         BR        R12                 RETURN TO CALLER
**  CLEAR PRINT BUFFER
CLEARBUF MVI       0(R1),C' '
         MVC       1(120,R1),0(R1)
         BR        R14
 SPACE 4
**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**
**  TAPE INPUT PROCESSOR
**       NORMAL RETURN   - OFFSET=4
**       ERR/EOF RETURN  - OFFSET=0
TAPEIN   LTR       R2,R2               ANY BYTES LEFT?
         BNP       4(R12)              NO, RETURN.
         LM        R14,R15,PNTR8A      LOAD BUFFER PARMS
         LTR       R1,R15              ANY SPACE AVAILABLE?
         BNP       TAPEIN2             NO, GET NEW REC
         CR        R2,R15              COMPARE REQUEST TO AVAILABLE
         BH        TAPEIN1             REQUEST GREATER
         LA        R0,0(R2,R14)        PROCESS SMALL REQUEST
         SR        R1,R2
         STM       R0,R1,PNTR8A
         TM        SWB,SWB6            FLUSH?
         BO        4(R12)              YES, SKIP MOVING DATA.
         BCTR      R2,0
         EX        R2,TAPEINM
         B         4(R12)
TAPEIN1  TM        SWB,SWB6            FLUSH?
         BO        *+12                YES, SKIP MOVING DATA
         BCTR      R15,0
         EX        R15,TAPEINM
         AR        R3,R1
         SR        R2,R1
TAPEIN2  GET       TAPE
         LA        R14,2(R1)
         LA        R15,78
         STM       R14,R15,PNTR8A
         LH        R1,0(R1)
         LH        R14,TAPECNTR
         LA        R14,1(R14)
         STH       R14,TAPECNTR
         LH        R14,TAPECNTR
         CR        R14,R1
         BE        TAPEIN
         BR        R12                 SEQUENCE ERROR.
TAPEINM  MVC       0(0,R3),0(R14)
**
TAPEEOF  BR        R12                 EOF RETURN
 SPACE 4
**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**
**  FREE BUFFER POOL
FREEPOOL FREEPOOL  (1)
         BR        R12
 SPACE 4
**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**
**  SET RETURN CODE
SETRET   CH        R15,RETCOD          LESS THAN OR EQUAL?
         BNHR      R14                 YES, RETURN
         STH       R15,RETCOD          NO, REPLACE
         BR        R14
 SPACE 4
**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**
**  READ IN A CONTROL CARD
GETCARD  GET       SYSIN
         B         4(R12)
EOFSYSIN OI        SWX,SWX1            FLAG EOF ON SYSIN
         BR        R12
 TITLE '           DCB  EXIT  ROUTINES'
**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**
**  DCB EXIT ROUTINES                                               **
**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**
         USING     IHADCB,R1
EXIT1    LH        R4,DCBLRECL         CHECK BLKSIZE
         CH        R4,DCBBLKSI
         BNH       EXIT1B              BLKSIZE HIGHER THAN LRECL
         CH        R4,=H'121'          IS THIS SYSPRINT?
         BNE       EXIT1A              NO.
         LA        R4,3509             YES, DEFAULT TO HALF TRK.
         STH       R4,DCBBLKSI
         BR        R14
EXIT1A   STH       R4,DCBBLKSI         DEFAULT TO BLKSIZE=LRECL
         NI        DCBRECFM,X'EF'      AND TURN OFF BLOCKED BIT
EXIT1B   XR        R2,R2               CHECK FOR BLKSIZE MULT OF
         LH        R3,DCBBLKSI         LRECL
         DR        R2,R4
         MH        R3,DCBLRECL         AND FORCE IT TO BE
         STH       R3,DCBBLKSI
         BR        R14
**
EXIT2    MVI       DCBBUFNO,0          PDS DCB EXIT
         CLI       TYPE,4              RELOAD?
         BE        EXIT2A              YES
         MVC       SAVRECFM,DCBRECFM
         MVC       SAVLRECL,DCBLRECL
         MVC       SAVBLKSI,DCBBLKSI
         TM        SWX,SWX2            PASS #2?
         BOR       R14                 NO.
         TM        DCBRECFM,RECF       RECFM=V?
         BOR       R14                 NO, RETURN
         MVI       DCBRECFM,RECF       YES, SET TO RECFM=F FOR PASS 1
         BR        R14
EXIT2A   CLI       DCBRECFM,0          NEW OUTPUT PDS
         BNE       *+10
         MVC       DCBRECFM,SAVRECFM
         MVC       WORK1(1),SAVRECFM
         MVC       WORK1+1(1),DCBRECFM
         NC        WORK1(2),=X'C0C0'
         CLC       WORK1(1),WORK1+1
         BNER      R14                 DIFFERENT RECFMS...ABORT
EXIT2B   TM        DCBRECFM,RECU
         BNO       EXIT2C              NOT RECFM=U
         NI        DCBRECFM,255-(RECFB-RECF)
EXIT2BA  CLC       DCBLRECL,SAVLRECL
         BH        *+10
         MVC       DCBLRECL,SAVLRECL
         CLC       DCBBLKSI,SAVBLKSI
         BH        *+10
         MVC       DCBBLKSI,SAVBLKSI
         BR        R14
EXIT2C   TM        DCBRECFM,RECF
         BO        EXIT2D              FOR RECFM=F/FB
         CLC       DCBLRECL,SAVLRECL   RECFM=V/VB
         BH        *+10
         MVC       DCBLRECL,SAVLRECL
         CLC       DCBBLKSI,SAVBLKSI
         BH        *+10
         MVC       DCBBLKSI,SAVBLKSI
         BR        R14
EXIT2D   CLC       DCBLRECL,=H'0'      RECFM=F/FB
         BNE       *+10
         MVC       DCBLRECL,SAVLRECL
         TM        DCBRECFM,RECFB      BLOCKED?
         BO        EXIT2E              YES
         CLC       DCBBLKSI,=H'0'
         BNE       *+10
         MVC       DCBBLKSI,SAVLRECL
         BR        R14
EXIT2E   CLC       DCBBLKSI,=H'0'
         BNE       *+10
         MVC       DCBBLKSI,SAVBLKSI
         XR        R2,R2               ROUND BLKSIZE TO LRECL
         LH        R3,DCBBLKSI
         LH        R4,DCBLRECL
         DR        R2,R4
         MH        R3,DCBLRECL
         STH       R3,DCBBLKSI
         BR        R14
**
EXIT3    LH        R4,DCBLRECL         TAPE DCB EXIT
         CH        R4,DCBBLKSI
         BNE       *+10
         NI        DCBRECFM,X'EF'      RECFM=F
         BR        R14
         BL        *+14
         LA        R4,800              DEFAULT BLKSIZE=800
         STH       R4,DCBBLKSI
         BR        R14
         XR        R2,R2
         LH        R3,DCBBLKSI
         DR        R2,R4
         MH        R3,DCBLRECL
         STH       R3,DCBBLKSI
         BR        R14
**
EXIT4    MVI       DCBBUFNO,0
         BR        R14
         DROP      R1
 TITLE '           STAE  EXIT  ROUTINE'
**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**
**  STAE  EXIT  ROUTINE                                             **
**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**
         USING     STAEXIT,R15
STAEXIT  CLOSE     SYSPRINT
         BR        R14
         DROP      R15
 TITLE '           DATA CONSTANTS, STORAGE AND LITERALS'
**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**
**  DATA CONSTANTS, STORAGE AND LITERALS                            **
**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**
SAVEAREA DC        9D'0'               OS REG SAVE AREA
WORK1    DC        4D'0'
SYNSAV   DC        8D'0'
FROMDD   DC        CL8' '
TODD     DC        CL8' '
ALLOCM   DC        F'0'
ALLOCS   DC        F'0'
LASTCARD DC        A(0)
PDSBUF1  DC        A(0)                PNTR TO PDS BUFFER
PDSBUF2A DC        A(0)                REBLOCKING BUFFER
PDSBUF2B DC        A(0)
PDSBUF2C DC        A(0)
PDSBUF2D DC        A(0)
TTR1     DC        F'0'
TTR2     DC        F'0'
TTR3     DC        F'0'
SAVEPNTR DC        4F'0'               FOR SAVING PNTR VALUES
PNTR1    DC        A(0)                PNTR TO HEAD OF DIRECTORY TABLE
PNTR2    DC        A(0)                PNTR TO CURRENT DIR TBL PSTN
PNTR3    DC        A(0)                PNTR TO CURRENT ENTRY IN BLOCK
PNTR3A   DC        A(0)                "BYTE COUNT" FOR CURRENT BLK
PNTR3B   DC        A(0)                "BYTE COUNT" FOR CURRENT ENTRY
PNTR4    DC        A(0)                PNTR TO DIR ENTRIES FOR LOAD
PNTR4A   DC        A(0)
PNTR5    DC        A(0)                PNTR TO LOAD-NOTELIST WORKAREA
PNTR5A   DC        A(0)
PNTR8A   DC        A(0)                TAPE BUFFER POINTER
PNTR8B   DC        A(0)                TAPE BFR AVAIL SPACE
PNTR9    DC        A(0)                PNTR TO SELECT/EXCLUDE MEMBER
*                                      NAME TABLE
         DS        0F                  DCB EXIT LISTS
EXLST1   DC        X'85',AL3(EXIT1)
EXLST2   DC        X'07',AL3(JFCB1),X'85',AL3(EXIT2)
EXLST3   DC        X'07',AL3(JFCB2),X'85',AL3(EXIT3)
EXLST4   DC        X'07',AL3(JFCB1),X'85',AL3(EXIT4)
RETCOD   DC        H'0'
PNUM     DC        H'0'
PCNT     DC        H'0'
PDSBUFL  DC        H'0'
BLKLEN   DC        H'0'                LENGTH OF CURRENT BLK
PLIM     DC        H'60'               MAX LINES PER PAGE
PNTR5L   DC        H'0'                LENGTH OF NOTELIST WORKAREA
PNTR5NL  DC        H'0'                LENGTH OF NOTELIST
PNTR5CNT DC        H'0'                LENGTH OF NOTELIST RECORD
NLCNT    DC        H'0'                COUNT OF NL TTRS IN DIR
TAPECNTR DC        H'0'
USEDBLKS DC        H'0'
MONTHS1  DC        H'31,28,31,30,31,30,31,31,30,31,30,31'
MONTHS2  DC        H'31,29,31,30,31,30,31,31,30,31,30,31'
MONTHS3  DC        C'JANFEBMARAPRMAYJUNJULAUGSEPOCTNOVDEC'
LLI      DC        X'000000'           FOR UNLOADED RECORDS
LLITTR   DC        X'000000'
SAVLRECL DC        H'0'
SAVBLKSI DC        H'0'
SAVRECFM DC        X'00'
UNLREC1  DC        FL2'75',X'0E'       IBM'S ID RECORD
         DC        C'THIS IS AN UNLOADED DATA SET PRODUCED BY'
         DC        X'80',C'THE IBM UTILITY, SYSMOVE.OMMBRLDWB'
UNLREC1L EQU       *-UNLREC1
LASTREC  DC        AL1(0,0,@END),C'THIS UNLOADED PDS WAS CREATED BY THE+
                GENE CZARCINSKI/GSFC UTILITY PROGRAM PDSUR.'
LASTRECL EQU       *-LASTREC
TYPE     DC        X'00'
SWITCHES DS        0XL2
SWA      DC        X'00'
SWB      DC        X'00'
SWX      DC        X'00'
         LTORG
 TITLE '            MESSAGES'
HEADING  DC        C'PDSUR -- 1.2/03JUL73                      PARTITIO+
               NED DATA SET UNLOAD/RELOAD UTILITY PROGRAM'
MSG01    DC        C'CONTROL CARD ERROR. CARD IGNORED.'
MSG02    DC        C'END OF TASK.'
MSG03    DC        C'END OF OPERATION.'
MSG04    DC        C'REQUIRED CONTROL CARD OPERAND MISSING.'
MSG05    DC        C'INVALID DUMP DATA SET FORMAT. OPERATION ABORTED.'
MSG06    DC        C' HAS BEEN UNLOADED.'
MSG07    DC        C'MEMBER '
MSG08    DC        C'OPEN ERROR FOR DDNAME='
MSG09    DC        C'OPERATION TERMINATED.'
MSG10    DC        C' HAS BEEN RELOADED.'
MSG11    DC        C'ALIAS  '
MSG12    DC        C'OPERATION ABORTED.'
MSG13    DC        C'INVALID DUMP DATA SET IDENTIFICATION.  OPERATION A+
               BORTED.'
MSG14    DC        C' HAS BEEN RELOADED AND REPLACED IN LIBRARY.'
MSG15    DC        C' ALREADY EXISTS.  MEMBER NOT ADDED.'
MSG15A   DC        C'FOR ABOVE MEMBER NOT ADDED.'
MSG15B   DC        C'ALREADY EXITS. NOT ADDED.'
MSG16    DC        C'INVALID DCB/DATA SET PARMS FOR PDS FILE.'
MSG17    DC        C' NOT ADDED.  DIRECTORY ERROR. NO SPACE LEFT.'
MSG18    DC        C' NOT ADDED.  PERMANENT I/O ERROR DETECTED ATTEMPTI+
               NG TO UPDATE DIRECTORY.'
MSG19    DC        C'SYNCHRONOUS  I/O  ERROR  DETECTED  --'
MSG20    DC        C'EXECUTION  ABORTED  *****************'
MSG21    DC        C'ERROR DETECTED READING NOTELIST.  '
MSG22A   DC        C'FROM -'
MSG22B   DC        C'TO   -'
MSG22C   DC        C'VOL='
MSG22D   DC        C'DSN='
MSG23    DC        C'NOTICE--REBLOCKING INVOKED (VALID FOR RECFM=F/FB O+
               NLY).'
MSG24A   DC        C'PDS CHARACTERISTICS -'
MSG24B   DC        C'RECFM=        LRECL=       BLKSIZE=       DIR-BLKS+
               -ALLOC=       '
MSG24C   DC        C'MAIN ALLOC=     ,  SEC. ALLOC=       (DASD TRACKS)+
               '
MSG24D   DC        C'OLD PDS CHARACTERISTICS -'
MSG24E   DC        C'NEW PDS CHARACTERISTICS -'
MSG24F   DC        C'RECFM=        LRECL=       BLKSIZE=      '
MSG25    DC        C' DATE/TIME =',X'4021204B4B4B20204021204B20204B2020+
               '
MSG25L   EQU       *-MSG25
 TITLE '            DCB''S'
SYSIN    DCB       DSORG=PS,MACRF=(GL),DDNAME=SYSIN,EODAD=EOFSYSIN,    +
               RECFM=FB,LRECL=80,EXLST=EXLST1
**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**
SYSPRINT DCB       DSORG=PS,MACRF=(PL),DDNAME=SYSPRINT,                +
               RECFM=FBA,LRECL=121,EXLST=EXLST1
**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**
TAPE     DCB       DSORG=PS,MACRF=(GL,PL),DDNAME=TAPE,EODAD=TAPEEOF,   +
               RECFM=FB,LRECL=80,EXLST=EXLST3
**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**
PDS      DCB       DSORG=PO,MACRF=(R,W),DDNAME=PDS,EODAD=PDSEOF,       +
               BUFNO=0,NCP=1,EXLST=EXLST2,SYNAD=SYNERR1
**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**
PDSDIR   DCB       DSORG=PO,MACRF=(R),DDNAME=PDS,EXLST=EXLST4,         +
               BUFNO=0,NCP=1,RECFM=F,LRECL=256,BLKSIZE=256,            +
               SYNAD=SYNERR1,EODAD=DIREOF
 TITLE '           JFCB''S, THE PDS DSCB, AND A WORKAREA'
PDSDSCB  CAMLST    SEARCH,JFCB1+JFCBDSNM,JFCB1+JFCBVOLS,DSCB
**
         DS        0D
**
JFCB1    DC        XL176'00'           FOR PDS
**
JFCB2    DC        XL176'00'           FOR TAPE
**
         DS        0D
         DC        X'00'               FOR ALIGNMENT
UNLREC2  DC        X'00C500'           LLI FOR REC 2 (OS REL 21)
WORKAREA EQU       *
DSNAME   DC        CL44' '
DSCB     DC        XL200'00',XL150'00'
         ORG       WORKAREA+140
UNLDDIR  DS        XL2                 DIRECTORY QUANTITY
UNLDFLAG DS        XL1                 UNLOAD CONTROL FLAG
UNLDSIZE DS        XL4                 PRIMARY ALLOC (IN BYTES)
UNLDSSIZ DS        XL4                 SECONDARY ALLOC (IN BYTES)
UNLDSPAR DS        XL42                UNUSED
UNLDDEVT DS        XL4                 DEVICE TYPE INFO
         ORG
DS1RECFM EQU       DSCB+40
DS1BLKL  EQU       DSCB+42
DS1LRECL EQU       DSCB+44
DS1SCALO EQU       DSCB+50
 TITLE '           DSECTS'
         DCBD      DSORG=(QS,PO),DEVD=(DA,TA)
**                                                                  **
**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**
**                                                                  **
         END       PDSUR
